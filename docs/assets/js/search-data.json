{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://jonsnowbd.github.io/NezDocs/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Collision",
    "content": "Nez features a complete kit to roll your games unique physics as easily as possible. This is generally much more desirable than full physics implementation(which is also available if needed) for platformers or other such games that require tight controls and deterministic physics that are less likely to have unintended behaviour emerge. . . Overlap Detection API . Nez includes a static class that has methods for detecting overlaps in the spatial hash. This is generally very fast, and check culling is handled for you. . Sourcefile . // Returns the first encountered Collider that the circle hits. CollisionResult x = Physics.OverlapCircle(Position, Radius) // Returns an int for use in a for loop, that tells you how many // Colliders were encountered. Results is a Collider[] array that is written to. int x = Physics.OverlapCircleAll(Position, Radius, Results) // Returns the first encountered Collider that the rect hits. CollisionResult x = Physics.OverlapRectangle(ref RectangleF) // Returns an int for use in a for loop, that tells you how many Colliders // were encountered. Results is a Collider[] array that is written to. int x = Physics.OverlapRectangleAll(ref RectangleF, Results) . All of these can take an optional int which represents a LayerMask to filter what can and cannot return a collision. . . Mover Example . When you are making an entity that can move and should respect collisions, its recommended to use the Mover component. It’s versatile and simple enough to not be restrictive in how you design your physics interactions. . Here is an example of an entity that will bounce around like a classic Pong ball. . public class Pongball : Entity { Mover Mover; CollisionResult Collision; public Vector2 Speed; public Pongball() : base(&quot;Pong Ball&quot;) { AddComponent(new CircleCollider(8f)); // Reference to the collider isnt required. Speed = new Vector2(60f, 40f); // Mover is a component that is very small. It only does a few things: // 1: .Move(Vector2, out Col) will translate the entity and check if any collider attached hits something // 2: Then applies the minimum translation distance to make it not clip // 3: sets the Out Col to represent what happened. Mover = AddComponent&lt;Mover&gt;(); // With this in mind, its generally recommended to use this component as an &#39;interface&#39; to // get collision legwork out of the way when moving an entity with colliders. } public override void Update() { base.Update(); Mover.Move(Speed * Time.DeltaTime, out Collision); // Nullcheck .Collider to see if it collided this frame. if (Collision.Collider != null) { Speed = Vector2.Reflect(Speed, Collision.Normal); } } } . . As an example of how this could integrate with gameplay, you could examine Collision.Collider.Entity to see if it is, for example, a PongGoalpost to increment the score and reset the balls position .",
    "url": "https://jonsnowbd.github.io/NezDocs/features/Collision.html",
    "relUrl": "/features/Collision.html"
  }
  ,"2": {
    "title": "ImGui",
    "content": "ImGUI is an immediate mode UI used to very quickly and cleanly create development GUI to debug your content, or to create custom editors/inspectors for your game. . Enabling ImGUI . For a basic ImGUI inspector in Nez there are 2 things you need to do, first of which is to reference Nez/Nez.ImGui/Nez.ImGui.csproj in your Game’s .csproj: . &lt;ItemGroup&gt; &lt;!-- If the include isn&#39;t your path to nez, make sure to change it below! --&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.ImGui Nez.ImGui.csproj&quot; /&gt; &lt;/ItemGroup&gt; . And the in your Core implementation add the Nez.ImGuiTools.ImGuiManager to the list of Global Managers. . using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Input; using Nez; using Nez.ImGuiTools; public class GameCore : Core { override protected void Initialize() { base.Initialize(); var manager = new ImGuiManager(); // Optionally you can make it toolbar only! // This doesnt remove anything that you cant re-enable in game while you debug. manager.ShowSeperateGameWindow = false; manager.ShowCoreWindow = false; manager.ShowSceneGraphWindow = false; RegisterGlobalManager(manager); manager.SetEnabled(false); // Turn it off right after if you don&#39;t need to immediately use it. Scene = new Scene(); } } . . Using ImGUI Directly . You may have noticed that you cannot use ImGUI directly, this is because the ImGui Framework that Nez uses is not re-exported. To use the ImGUI Library directly its recommended to add a reference to it to your Game’s .csproj: . &lt;ItemGroup&gt; &lt;!-- Remember this doesnt have to be by itself, you can add this to any ItemGroup --&gt; &lt;PackageReference Include=&quot;ImGui.NET&quot; Version=&quot;1.71.0&quot; /&gt; &lt;/ItemGroup&gt; . Note: It is very important that you specifically install 1.71.0 as it is what Nez uses under the hood. Anything else could have type mismatches. . And you can now directly use the ImGUI by registering draw commands. As an example in an arbitary Scene: . using ImGuiNET; using Nez; using Nez.ImGuiTools; namespace GameSource.Scenes { public class ImGuiExample : Scene { ImGuiWindowFlags flags; public ImGuiExample() { flags = ImGuiWindowFlags.MenuBar | ImGuiWindowFlags.AlwaysVerticalScrollbar; } public override void OnStart() { base.OnStart(); var manager = Core.GetGlobalManager&lt;ImGuiManager&gt;(); manager.RegisterDrawCommand(DrawImGuiPanel); manager.SetEnabled(true); } void DrawImGuiPanel() // No return type, no parameters. { ImGui.Begin(&quot;Panel Name&quot;, flags); if (ImGui.Button(&quot;Log&quot;)) { Debug.Log(&quot;Button was pressed&quot;); } ImGui.End(); } } } . . Learning more about ImGUI . If you’re curious on what ImGUI can do, or how to do it, Nez by default includes a demo window that shows off everything that ImGUI can do, you can cross reference this panel with everything inside this file. The method names are the exact same and pointers are replaced with ref. . . Resources . ImGui_Demo.cpp | Nez Repo Docs | .",
    "url": "https://jonsnowbd.github.io/NezDocs/features/ImGui.html",
    "relUrl": "/features/ImGui.html"
  }
  ,"3": {
    "title": "Nez Project from Scratch",
    "content": "Creating a Nez project from scratch is very easy. For the following guide I’m going to be using the command line dotnet and some basic text editing to create the project in order to be friendlier to all platforms. . You will need . Git (or from your system package manager) | Dotnet commandline tool (Core for the commandline, .net for the runtime) | . Create the solution . &gt; mkdir NezExample &gt; cd NezExample &gt; dotnet new solution &gt; git init . This is the first step of the setup, we initialize a git repo in order to track Nez and easily have a way to update it later. . Submodule Nez and create game project . &gt; git submodule add https://github.com/prime31/Nez.git &gt; mkdir GameSource &gt; cd GameSource &gt; dotnet new console . And then we added nez to our solution by adding it as a submodule. What this means is that it is stored as a pointer to the actual git project, making it super easy to update nez down the line! . . Modify the project and install Monogame . In GameSource/GameSource.csproj we’re going to make a few changes. . First we change the output to WinExe in order to hide the console and let dotnet know that we’re making a windowed application. . Then we move over to net471 since core doesnt play all too well with certain features! . And finally set the architecture to AnyCPU for compatibility reasons. All these changes are related to the first property group. If youre confused you can see the whole .csproj later in the article. . &lt;PropertyGroup&gt; &lt;OutputType&gt;WinExe&lt;/OutputType&gt; &lt;TargetFramework&gt;net471&lt;/TargetFramework&gt; &lt;AssemblyName&gt;YourGameName&lt;/AssemblyName&gt; &lt;PlatformTarget&gt;anycpu&lt;/PlatformTarget&gt; &lt;/PropertyGroup&gt; . Then we add the packages for Monogame and ImGui and Nez! . &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ImGui.NET&quot; Version=&quot;1.71.0&quot; /&gt; &lt;PackageReference Include=&quot;MonoGame.Framework.DesktopGL&quot; Version=&quot;3.7.1.189&quot; /&gt; &lt;!-- Required: --&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.Portable Nez.csproj&quot; /&gt; &lt;!-- Optional: --&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.ImGui Nez.ImGui.csproj&quot; /&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.Persistence Nez.Persistence.csproj&quot; /&gt; &lt;/ItemGroup&gt; . So that the entire file looks something like this . &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;WinExe&lt;/OutputType&gt; &lt;TargetFramework&gt;net471&lt;/TargetFramework&gt; &lt;AssemblyName&gt;YourGameName&lt;/AssemblyName&gt; &lt;PlatformTarget&gt;anycpu&lt;/PlatformTarget&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=&quot;ImGui.NET&quot; Version=&quot;1.71.0&quot; /&gt; &lt;PackageReference Include=&quot;MonoGame.Framework.DesktopGL&quot; Version=&quot;3.7.1.189&quot; /&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.Portable Nez.csproj&quot; /&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.ImGui Nez.ImGui.csproj&quot; /&gt; &lt;ProjectReference Include=&quot;.. Nez Nez.Persistence Nez.Persistence.csproj&quot; /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; . . Create the bare minimum to run a Nez Project . We then create a file NezExample/GameSource/GameCore.cs with the following contents . using Nez; namespace GameSource { public class GameCore : Core { override protected void Initialize() { base.Initialize(); Scene = new Scene(); } } } . and then modify NezExample/GameSource/Program.cs to run our game . using System; namespace GameSource { class Program { static void Main(string[] args) { using(var game = new GameCore()) { game.Run(); } } } } . We can now test it all works by running dotnet run in the NezExample/Gamesource folder or by opening the solution file with Visual Studio and selecting GameSource as your debug project. You should see a screen like this . . Clean up and register all our projects . Now we register all our projects into the solution. In NezExample/ run the following . &gt; dotnet sln add Nez/Nez.Portable/Nez.csproj &gt; dotnet sln add Nez/Nez.Persistence/Nez.Persistence.csproj &gt; dotnet sln add Nez/Nez.ImGui/Nez.ImGui.csproj &gt; dotnet sln add GameSource/GameSource.csproj . Optional stuff includes adding C# Specific .gitignore, making a github project to house this new git repo, or adding other amazing nez features such as Verlet Physics or Farseer Physics. . Congratulations! You have a nez project up and running. . Extra . There is more interesting things you can add to your .csproj to make it much easier to handle. One of which is to enable all assets being immediately copied over to the build, no more managing VS file references! . &lt;ItemGroup&gt; &lt;Content Include=&quot;Content **&quot;&gt; &lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt; &lt;/Content&gt; &lt;/ItemGroup&gt; . Another great addition is automatically including Nez’s default shaders and assets. . &lt;!-- Default Nez Assets --&gt; &lt;ItemGroup&gt; &lt;Content Include=&quot;../Nez/DefaultContent/FNAEffects/**/*.fxb&quot;&gt; &lt;Link&gt;Content/nez/effects/%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/Content&gt; &lt;Content Include=&quot;../Nez/DefaultContent/textures/**/*.xnb&quot;&gt; &lt;Link&gt;Content/nez/textures/%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt; &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt; &lt;/Content&gt; &lt;/ItemGroup&gt; . Finished Project Download . Here is a link to download the finished project with all the extras and an example scene! .",
    "url": "https://jonsnowbd.github.io/NezDocs/install/from-scratch.html",
    "relUrl": "/install/from-scratch.html"
  }
  ,"4": {
    "title": "Installation",
    "content": "In these articles we cover getting Nez up and running in new and existing FNA/Monogame projects. .",
    "url": "https://jonsnowbd.github.io/NezDocs/install/",
    "relUrl": "/install/"
  }
  ,"5": {
    "title": "Home",
    "content": "Nez . 2D Based Monogame/FNA Framework . Get Started . Learn More . . Components . // Easily create reusable pieces of logic that can apply to every // game object! public class Oscillate : Component, IUpdatable { public Vector2 Direction = new Vector2(1f, 0f); public float Speed = 2f; public float Strength = 20f; void IUpdatable.Update() { var amount = Mathf.Sin(Time.TimeSinceSceneLoad * Speed) * 0.15915482422f; Entity.Position += Direction * amount * Time.DeltaTime * (Strength * Speed); } } . Content Management . // Be done with the MGCB pipeline. Load your assets directly, in project // or anywhere with an absolute path for external assets! PlayerAtlas = Scene.Content.LoadTexture(&quot;Content/Atlas/Player.png&quot;); PlayerJump = Scene.Content.LoadSoundEffect(&quot;Content/Sound/PlayerJump.ogg&quot;); // Worry not, disposing is handled for you when the scene is gone . Amazing Input . // Virtual inputs make creating powerful control schemes easy, quick // and most importantly strongly typed. JumpButton = new VirtualButton(); JumpButton.AddGamePadButton(GamepadIndex, Buttons.A); JumpButton.AddKeyboardKey(Keys.Space); JumpButton.AddKeyboardKey(Keys.W); if (JumpButton.IsPressed) { // Easy to use too! } . Easy Debugging . // Static methods to add debug elements to the scene void IUpdatable.Update() { if (JumpButton.IsPressed) { // Draw a debug text message for 2 seconds: Debug.DrawText(&quot;Debug Text!&quot;, 2f); // Draw a jump trajectory for 2 seconds: Debug.DrawLine(Entity.Position, GetJumpTarget(), Color.White, 2f); } } // Or an override in `Component` to draw constant debug overlays public override void DebugRender(Batcher batcher) { base.DebugRender(batcher); // Make a green circle follow the entity: batcher.DrawCircle(Entity.Position, 5f, Color.Green); } . I’m In! .",
    "url": "https://jonsnowbd.github.io/NezDocs/",
    "relUrl": "/"
  }
  ,"6": {
    "title": "Features",
    "content": "In these articles we go over Nez’s many features. .",
    "url": "https://jonsnowbd.github.io/NezDocs/features/",
    "relUrl": "/features/"
  }
  
}